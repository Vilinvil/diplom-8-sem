clear;close all;
addpath('.\figure');
addpath('.\utils\arrays');

rng(1); % TODO remove because this for repeated results

image = imread('./test1_1.jpg');
sizeImage = size(image);

figure, imshow(image);title('original');
image = rgb2gray(image);
% figure, imshow(image);title('gray');

gausImg = imgaussfilt(image,2);
%figure, imshow(gausImg);title('gaus');

cannyImg=edge(image,'canny', [], 2.9); % 3.4 begin
figure,imshow(cannyImg);title('canny');

[H,theta,rho] = hough(cannyImg);

maxH = max(H(:));
thresholdHoug = ceil(0.5*maxH);
peaks = houghpeaks(H,4,'threshold',thresholdHoug); % 0.7 begin

% figure_hough_space(H, theta, rho);
% figure_peaks_hough_space(peaks, theta, rho);

lines = houghlines(cannyImg,theta,rho,peaks,'FillGap',5,'MinLength',7);

[K, B] = convert_lines_to_parameters(lines);

figure, imshow(image),title('points'), hold on;
figure_lines_by_two_points(lines);

maxY = sizeImage(2);
figure, imshow(image),title('lines'), hold on;
figure_lines_by_parameters(K, B, maxY, 'green');


numberClasses = 4;
lineParameters = [K(1:3, :), B(1:3, :)];

for curNumberClasses = 2:numberClasses
    [classIdxes, centerPoints] = kmeans(lineParameters, curNumberClasses);
    figure, imshow(image),title('Classificated by K,B param numberClasses = ' + ...
        string(curNumberClasses)), hold on;
    figure_classificated_lines_by_parametrs(K, B, maxY, classIdxes, curNumberClasses);
end

% figure, imshow(image),title('points'), hold on;
% points = convert_lines_in_points(lines, 10);
% plot(points(:, 1), points(:, 2), 'k*','MarkerSize',5)
% 
% for curNumberClasses = 1:numberClasses
%     [classIdxes, centerPoints] = kmeans(points, curNumberClasses);
%     figure, imshow(image),title('Classificated by points numberClasses = ' + ...
%         string(curNumberClasses)), hold on;
%     figure_classificated_points(points, classIdxes, curNumberClasses);
% end
